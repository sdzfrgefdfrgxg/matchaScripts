-- Bunny Hop Script for Arsenal using Matcha
-- Automatically jumps when holding spacebar and in the air

-- Wait for game to load
local function waitForGameLoad()
    while not game:IsLoaded() do wait() end
    return true
end

-- Matcha functions
local function isKeyPressed(keycode)
    return iskeypressed and iskeypressed(keycode) or false
end

-- Constants
local SPACEBAR = 0x20  -- Virtual key code for Spacebar
local PLAYER_ADDRESS = 0x0  -- You'll need to get the correct base address for the player
local FLOOR_MATERIAL_OFFSET = 0x190
local JUMP_POWER_OFFSET = 0x1B0

-- Initialize game services
local success, players = pcall(game.GetService, game, "Players")
if not success then
    error("Failed to get Players service")
end

local localPlayer = players.LocalPlayer
if not localPlayer then
    error("LocalPlayer not found")
end

-- Create main GUI
local gui = nil
local function createGUI()
    -- Only create GUI if it doesn't exist
    if not gui or not gui.Parent then
        gui = Instance.new("ScreenGui")
        gui.Name = "BunnyHopGUI"
        gui.ResetOnSpawn = false
        
        -- Make sure we have a PlayerGui to parent to
        local playerGui = localPlayer:FindFirstChild("PlayerGui")
        if not playerGui then
            playerGui = localPlayer:WaitForChild("PlayerGui", 10)
            if not playerGui then
                error("Failed to find PlayerGui")
            end
        end
        
        gui.Parent = playerGui
    end
    return gui
end

-- Main frame nigga
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 80)
frame.Position = UDim2.new(0.8, 0, 0.1, 0)
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true
frame.Parent = gui

-- Title
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundTransparency = 1
title.Text = "Bunny Hop"
title.TextColor3 = Color3.new(1, 1, 1)
title.TextSize = 18
title.Font = Enum.Font.GothamBold
title.Parent = frame

-- Toggle button
local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0.8, 0, 0, 30)
toggleButton.Position = UDim2.new(0.1, 0, 0.5, 0)
toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
toggleButton.BorderSizePixel = 0
toggleButton.Text = "Toggle (F8)"
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.TextSize = 14
toggleButton.Font = Enum.Font.Gotham

toggleButton.MouseButton1Click:Connect(function()
    enabled = not enabled
    updateButton()
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.F8 and not gameProcessed then
        enabled = not enabled
        updateButton()
    end
end)

local statusLabel = Instance.new("TextLabel")
statusLabel.Size = UDim2.new(1, 0, 0, 20)
statusLabel.Position = UDim2.new(0, 0, 0.8, 0)
statusLabel.BackgroundTransparency = 1
statusLabel.Text = "Status: "
statusLabel.TextColor3 = Color3.new(1, 1, 1)
statusLabel.TextSize = 12
statusLabel.Font = Enum.Font.Gotham
statusLabel.Parent = frame

local enabled = true
local function updateButton()
    if enabled then
        toggleButton.BackgroundColor3 = Color3.fromRGB(76, 209, 55)
        statusLabel.Text = "Status: ENABLED"
    else
        toggleButton.BackgroundColor3 = Color3.fromRGB(255, 71, 87)
        statusLabel.Text = "Status: DISABLED"
    end
end

updateButton()
toggleButton.Parent = frame

-- Add to player's GUI
gui.Parent = playerGui

-- Initialize
if waitForGameLoad() then
    -- Create GUI
    local success, err = pcall(createGUI)
    if not success then
        warn("Failed to create GUI: " .. tostring(err))
    end
    
    -- Main loop for bunny hopping
    while true do
    if enabled then
        local holdingSpace = isKeyPressed(SPACEBAR)
        
        local character = localPlayer.Character
        if character and character.Parent then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            local hrp = character:FindFirstChild("HumanoidRootPart")
            
            if humanoid and hrp and humanoid.Health > 0 then
                -- Get memory addresses (you'll need to find the correct base address)
                local humanoidAddress = 0x0 -- Replace with actual humanoid address
                
                if humanoidAddress ~= 0 then
                    -- Read floor material and jump power from memory
                    local floorMat = memory_read("int", humanoidAddress + FLOOR_MATERIAL_OFFSET) or 0
                    local jumpPower = memory_read("float", humanoidAddress + JUMP_POWER_OFFSET) or 50
                    
                    -- Check if not on ground (floorMat ~= 1792) and space is held
                    if floorMat ~= 1792 and holdingSpace then
                        -- Simulate jump by applying upward velocity
                        local vel = hrp.Velocity
                        hrp.Velocity = Vector3.new(vel.X, jumpPower, vel.Z)
                    end
                end
            end
        end
    end
        wait(0.01) -- Small delay to prevent excessive CPU usage
    end
else
    warn("Game failed to load properly")
end
